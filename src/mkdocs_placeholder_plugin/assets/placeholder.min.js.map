{"version":3,"file":"placeholder.min.js","mappings":"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","sources":["webpack:///./src/debug.ts","webpack:///./src/validator.ts","webpack:///./src/state_manager.ts","webpack:///./src/replacer.ts","webpack:///./src/dependency_graph.ts","webpack:///./src/parse_settings.ts","webpack:///./src/auto_tables.ts","webpack:///./src/inputs.ts","webpack:///./src/main.ts","webpack:///./src/api.ts","webpack:///./src/index.ts"],"sourcesContent":["const timestamp = () => `${new Date().toISOString().slice(11, 23)} (TS)`;\nlet is_reload_enabled = true;\nfunction internal_log(...args) {\n    console.log.apply(console, [`${timestamp()} |`, ...arguments]);\n}\nfunction internal_info(...args) {\n    console.info.apply(console, [`${timestamp()} |`, ...arguments]);\n}\nfunction internal_debug(...args) {\n    console.debug.apply(console, [`${timestamp()} |`, ...arguments]);\n}\nfunction noop(...args) {\n}\nexport const reload_page = () => {\n    if (is_reload_enabled) {\n        window.location.reload();\n    }\n    else {\n        internal_info(\"Page reload was triggered and blocked due to PlaceholderPlugin.debug_disable_reload\");\n    }\n};\nconst noop_logger = {\n    \"log\": noop,\n    \"info\": noop,\n    \"debug\": noop,\n};\nexport const init_logging = (enable_debug) => {\n    if (enable_debug) {\n        // Write debugging messages to console\n        logger = {\n            \"log\": internal_log,\n            \"info\": internal_info,\n            \"debug\": internal_debug,\n        };\n    }\n    else {\n        // If debugging is disabled, make the functions do nothing\n        logger = noop_logger;\n        return;\n    }\n};\nexport let logger = noop_logger;\n// You can call this manually from the browser's console to temporarily disable reloads and debug the application\nexport const debug_disable_reload = () => {\n    internal_info(\"Page reload was disabled for debugging purposes\");\n    is_reload_enabled = false;\n};\n","import { logger } from \"./debug\";\nimport { get_array_field, get_boolean_field, get_string_field } from \"./parse_settings\";\nexport var ValidatorSeverity;\n(function (ValidatorSeverity) {\n    ValidatorSeverity[\"Warning\"] = \"WARNING\";\n    ValidatorSeverity[\"Error\"] = \"ERROR\";\n})(ValidatorSeverity || (ValidatorSeverity = {}));\nexport var PlaceholderValidatity;\n(function (PlaceholderValidatity) {\n    PlaceholderValidatity[\"Good\"] = \"GOOD\";\n    PlaceholderValidatity[\"Warning\"] = \"WARNING\";\n    PlaceholderValidatity[\"Error\"] = \"ERROR\";\n    PlaceholderValidatity[\"NoValidator\"] = \"NO_VALIDATOR\";\n})(PlaceholderValidatity || (PlaceholderValidatity = {}));\nexport const parse_validator = (data) => {\n    const rules = get_array_field(\"rules\", \"object\", data);\n    if (rules.length == 0) {\n        throw new Error(`Rules should not be an empty array.\\nProblematic object: ${JSON.stringify(data)}`);\n    }\n    const id = get_string_field(\"id\", data);\n    return {\n        \"display_name\": get_string_field(\"display_name\", data),\n        \"id\": id,\n        \"rules\": rules.map(x => parse_rule(x, id)),\n    };\n};\nconst is_valid_value = (validator, value) => {\n    for (const rule of validator.rules) {\n        if (rule.is_match_function(value) != rule.should_match) {\n            // this rule rejects the value\n            if (rule.severity == ValidatorSeverity.Error) {\n                // immediately return once we found a hard failure\n                return false;\n            }\n        }\n    }\n    // no real errors -> is valid\n    return true;\n};\nexport const is_valid_value_for_placeholder = (placeholder, value) => {\n    // @TODO decide: validate normal value or expanded value? Needs to be checked for every function call\n    if (placeholder.validators.length > 0) {\n        for (const validator of placeholder.validators) {\n            if (is_valid_value(validator, value)) {\n                // a single validator accepting it is enough\n                return true;\n            }\n        }\n        // no validator accepted it -> bad\n        return false;\n    }\n    else {\n        return true;\n    }\n};\nconst validate_value = (validator, value) => {\n    const warnings = [];\n    const errors = [];\n    for (const rule of validator.rules) {\n        if (rule.is_match_function(value) != rule.should_match) {\n            // this rule rejects the value\n            if (rule.severity == ValidatorSeverity.Error) {\n                errors.push(`[${validator.display_name}] Error: ${rule.error_message}`);\n            }\n            else if (rule.severity == ValidatorSeverity.Warning) {\n                warnings.push(`[${validator.display_name}] Warning: ${rule.error_message}`);\n            }\n            else {\n                console.warn(`Unknown rule severity ${rule.severity}`);\n            }\n        }\n    }\n    return {\n        \"errors\": errors,\n        \"warnings\": warnings,\n    };\n};\nconst validate_placeholder_value = (placeholder, value) => {\n    const result_list = [];\n    let has_no_error = false; // whether at least one placeholder has no errors\n    if (placeholder.validators.length > 0) {\n        for (const validator of placeholder.validators) {\n            const result = validate_value(validator, value);\n            result_list.push(result);\n            if (result.errors.length == 0) {\n                has_no_error = true;\n                if (result.warnings.length == 0) {\n                    return placeholder_is_good(placeholder);\n                }\n            }\n        }\n        if (has_no_error) {\n            return placeholder_is_warning(result_list);\n        }\n        else {\n            return placeholder_is_error(result_list);\n        }\n    }\n    else {\n        return {\n            \"rating\": PlaceholderValidatity.NoValidator,\n            \"message\": \"No validators are specified for this placeholder\",\n        };\n    }\n};\nconst placeholder_is_error = (result_list) => {\n    // If all of them have errors, we will ignore the warnings to keep it shorter\n    const errors = [];\n    for (const result of result_list) {\n        errors.push(...result.errors);\n    }\n    return {\n        \"rating\": PlaceholderValidatity.Error,\n        \"message\": errors.join(\"\\n\"),\n    };\n};\nconst placeholder_is_warning = (result_list) => {\n    // If some return warnings and some return errors, we will only show the ones with warnings.\n    const lines = [];\n    for (const result of result_list) {\n        if (result.errors.length == 0) {\n            lines.push(...result.warnings);\n        }\n    }\n    return {\n        \"rating\": PlaceholderValidatity.Warning,\n        \"message\": lines.join(\"\\n\"),\n    };\n};\nconst placeholder_is_good = (placeholder) => {\n    // If one of them has neither warnings or errors, we return Good status immediately\n    let message;\n    if (placeholder.validators.length == 1) {\n        message = `Expecting: ${placeholder.validators[0].display_name}`;\n    }\n    else {\n        message = \"Expecting one of the following: \";\n        for (const v of placeholder.validators) {\n            message += `\\n - ${v.display_name}`;\n        }\n    }\n    return {\n        \"rating\": PlaceholderValidatity.Good,\n        \"message\": message,\n    };\n};\nconst parse_rule = (data, validator_id) => {\n    const severity_str = get_string_field(\"severity\", data);\n    let severity;\n    if (severity_str == \"warning\" || severity_str == \"warn\") {\n        severity = ValidatorSeverity.Warning;\n    }\n    else if (severity_str == \"error\") {\n        severity = ValidatorSeverity.Error;\n    }\n    else {\n        throw new Error(`Unknown severity '${severity_str}'`);\n    }\n    let is_match_function;\n    if (data.regex) {\n        const regex = get_string_field(\"regex\", data);\n        const compiled_regex = new RegExp(regex);\n        is_match_function = (value) => compiled_regex.test(value);\n    }\n    else {\n        const match_function_body = get_string_field(\"match_function\", data);\n        // we need to use Function instead of eval(), since minification will rename the argument\n        // this may also be more performant, since the code is only compiled once\n        const match_function = new Function(\"value\", match_function_body);\n        is_match_function = (value) => {\n            try {\n                const result = match_function(value);\n                if (typeof (result) != \"boolean\") {\n                    throw new Error(`Custom match_function '${match_function_body}' of validator ${validator_id} should return a boolean, but it returned a ${typeof (result)}: ${result}`);\n                }\n                else {\n                    return result;\n                }\n            }\n            catch (error) {\n                throw new Error(`Failed to evaluate match_function '${match_function_body}' of validator ${validator_id}: ${error}`);\n            }\n        };\n    }\n    return {\n        \"severity\": severity,\n        \"should_match\": get_boolean_field(\"should_match\", data),\n        \"error_message\": get_string_field(\"error_message\", data),\n        \"is_match_function\": is_match_function,\n    };\n};\nconst update_tooltip = (input_field, validation_result) => {\n    // Set highlighting\n    input_field.classList.remove(\"validation-error\", \"validation-warn\", \"validation-ok\", \"validation-none\");\n    if (validation_result.rating == PlaceholderValidatity.Good) {\n        input_field.classList.add(`validation-ok`);\n    }\n    else if (validation_result.rating == PlaceholderValidatity.Warning) {\n        input_field.classList.add(`validation-warn`);\n    }\n    else if (validation_result.rating == PlaceholderValidatity.Error) {\n        input_field.classList.add(`validation-error`);\n    }\n    else if (validation_result.rating == PlaceholderValidatity.NoValidator) {\n        input_field.classList.add(`validation-none`);\n    }\n    else {\n        console.warn(`Unknown placeholder validity: ${validation_result.rating}`);\n    }\n    // Set tooltip\n    input_field.title = validation_result.message;\n};\n// Returns \"false\" if the value has an error, so for example page reloading should be cancelled.\nexport const validate_textbox_input_field = (placeholder, input_field) => {\n    const result = validate_placeholder_value(placeholder, input_field.value);\n    update_tooltip(input_field, result);\n    logger.debug(\"Validation: name =\", placeholder.name, \", value =\", input_field.value, \", results =\", result.rating);\n    const can_accept_value = result.rating != PlaceholderValidatity.Error;\n    return can_accept_value;\n};\n","import { logger, reload_page } from \"./debug\";\nimport { is_valid_value_for_placeholder } from \"./validator\";\n// These functions are here to make it easier to change the storage backend (for example locasstorage -> cookies)\n// and to make it possible to potentially have better debugging\nconst STORAGE_PREFIX = \"PLACEHOLDER_\"; // @TODO make it configurable by settings?\nconst SETTINGS_PREFIX = \"PLACEHOLDER-SETTING_\";\nconst store_value = (name, value) => {\n    localStorage.setItem(STORAGE_PREFIX + name, value);\n};\nconst load_value = (name) => {\n    return localStorage.getItem(STORAGE_PREFIX + name);\n};\nexport const store_boolean_setting = (name, value) => {\n    logger.info(`Storing boolean setting '${name}' with value ${value}`);\n    localStorage.setItem(`${SETTINGS_PREFIX}${name}`, value ? \"1\" : \"0\");\n};\nexport const load_boolean_setting = (name, default_value) => {\n    const stored = localStorage.getItem(`${SETTINGS_PREFIX}${name}`);\n    logger.info(`Reading boolean setting '${name}' with value ${stored}`);\n    if (stored === null) {\n        return default_value;\n    }\n    else if (stored === \"1\") {\n        return true;\n    }\n    else if (stored === \"0\") {\n        return false;\n    }\n    else {\n        // Unexpected state, warn user and fall back to default\n        console.warn(`Unexpected state for boolean setting. Should be null, '0' or '1', but was '${stored}'`);\n        return default_value;\n    }\n};\n// I changed the storage model: the real value is stored in the placeholder object instead of in localstorage -> easier and safer to access\n// We pass the whole placeholder instead of just a name, so that you can not accidentally call the wrong function or use an invalid placeholder name\n// We use different values for different types (checkbox -> NAME_IS_CHECKED, textbox -> NAME_TEXT, ...) so that if a user changes the type of a placeholder it should not cause problems\nexport const store_checkbox_state = (placeholder, new_is_checked) => {\n    // Update the placeholder's value\n    placeholder.current_is_checked = new_is_checked;\n    placeholder.current_value = new_is_checked ? placeholder.value_checked : placeholder.value_unchecked;\n    // Permanently store the new state\n    store_value(`${placeholder.name}_IS_CHECKED`, new_is_checked ? \"1\" : \"0\");\n};\nexport const load_checkbox_state = (placeholder) => {\n    const stored_state = load_value(`${placeholder.name}_IS_CHECKED`);\n    if (stored_state == null) {\n        // No stored state -> use default value\n        placeholder.current_is_checked = placeholder.checked_by_default;\n    }\n    else {\n        if (stored_state == \"0\" || stored_state == \"1\") {\n            // Load the stored state\n            placeholder.current_is_checked = stored_state == \"1\";\n        }\n        else {\n            // Unexpected state, warn user and fall back to default\n            console.warn(`Unexpected state for checkbox. Should be '0' or '1', but was '${stored_state}'`);\n            placeholder.current_is_checked = placeholder.checked_by_default;\n        }\n    }\n    // Now we update the actual value based on the state\n    placeholder.current_value = placeholder.current_is_checked ? placeholder.value_checked : placeholder.value_unchecked;\n};\nexport const clear_state = () => {\n    clear_by_prefix(STORAGE_PREFIX);\n};\nexport const clear_settings = () => {\n    clear_by_prefix(SETTINGS_PREFIX);\n};\nconst clear_by_prefix = (prefix) => {\n    // The easiest way would be to clear the whole storage, but that might break other plugins / scripts.\n    // So we only delete all items that start with our prefix\n    console.warn(`Clearing all localStorage items starting with '${prefix}'`);\n    let i = 0;\n    while (i < localStorage.length) {\n        const key = localStorage.key(i);\n        if (key === null || key === void 0 ? void 0 : key.startsWith(prefix)) {\n            // Delete the item\n            localStorage.removeItem(key);\n        }\n        else {\n            // Not ours, so we skip it\n            i++;\n        }\n    }\n    reload_page();\n};\nconst is_valid_index = (placeholder, index) => {\n    try {\n        const item = placeholder.options[index];\n        return item != undefined && item != null;\n    }\n    catch (error) {\n        return false;\n    }\n};\nexport const store_dropdown_state = (placeholder, new_index) => {\n    // Perform sanity checks on the index\n    if (is_valid_index(placeholder, new_index)) {\n        store_value(`${placeholder.name}_INDEX`, `${new_index}`);\n        placeholder.current_value = placeholder.options[new_index].value;\n        placeholder.current_index = new_index;\n    }\n    else {\n        throw new Error(`Index must a whole number N, where 0 <= N < ${placeholder.options.length}. But it is ${new_index}`);\n    }\n};\nexport const load_dropdown_state = (placeholder) => {\n    const stored_state = load_value(`${placeholder.name}_INDEX`);\n    if (stored_state == null) {\n        // No stored state -> use default value\n        placeholder.current_index = placeholder.default_index;\n    }\n    else {\n        const stored_index = Number(stored_state);\n        if (is_valid_index(placeholder, stored_index)) {\n            // Load the stored state\n            placeholder.current_index = stored_index;\n        }\n        else {\n            // Unexpected state, warn user and fall back to default\n            console.warn(`Unexpected state for dropdown. Should be a whole number N, where 0 <= N < ${placeholder.options.length}. But it is ${stored_state}`);\n            placeholder.current_index = placeholder.default_index;\n        }\n    }\n    // Now we update the actual value based on the state\n    placeholder.current_value = placeholder.options[placeholder.current_index].value;\n};\nexport const store_textbox_state = (placeholder, new_value) => {\n    const is_validation_ok = is_valid_value_for_placeholder(placeholder, new_value);\n    logger.info(`Set textbox ${placeholder.name} to '${new_value}'. Validation ok? ${is_validation_ok}`);\n    if (is_validation_ok) {\n        store_value(`${placeholder.name}_TEXT`, new_value);\n    }\n    else {\n        throw new Error(`Validation error: Value '${new_value}' is not valid for placeholder ${placeholder.name}`);\n    }\n};\nexport const load_textbox_state = (placeholder) => {\n    const stored_state = load_value(`${placeholder.name}_TEXT`);\n    if (stored_state != null) {\n        if (is_valid_value_for_placeholder(placeholder, stored_state)) {\n            placeholder.current_value = stored_state;\n            return; // Do not use the default value / function\n        }\n        else {\n            console.warn(`Stored value for placeholder ${placeholder.name} is invalid: '${stored_state}'. Will revert to default.`);\n            // Should we remove the value? Idk\n        }\n    }\n    // Use a default value\n    if (placeholder.default_value != undefined) {\n        placeholder.current_value = placeholder.default_value;\n        if (!is_valid_value_for_placeholder(placeholder, placeholder.default_value)) {\n            console.warn(`Default value for placeholder '${placeholder.name}' is invalid: '${placeholder.default_value}'`);\n        }\n    }\n    else if (placeholder.default_function) {\n        try {\n            const result = placeholder.default_function();\n            placeholder.current_value = result;\n            try {\n                // store the function result, since it may be different with each invocation (such as a randomly generated password)\n                store_textbox_state(placeholder, result);\n            }\n            catch (error) {\n                console.warn(`Default function for placeholder '${placeholder.name}' returned invalid value: '${result}'`);\n            }\n        }\n        catch (error) {\n            // This will be called if the placeholder's custom function fails\n            console.error(`Error while loading default textbox state for placeholder ${placeholder.name}:`, error);\n            placeholder.current_value = \"DEFAULT_FUNCTION_ERROR\";\n        }\n    }\n    else {\n        throw new Error(`Either 'default_value' or 'default_function' needs to be set for placeholder ${placeholder.name}`);\n    }\n};\n","import { logger } from \"./debug\";\n// Replace a specific placeholder and return the estimated number of occurences (underestimated, may actually be higher)\nconst static_replace = (root_element, search_regex, replacement_value) => {\n    const walker = document.createTreeWalker(root_element, NodeFilter.SHOW_TEXT);\n    let node;\n    let count = 0;\n    if (!search_regex.global) {\n        console.warn(`You should set the global flag for the regex. Context: replacing '${search_regex.source}' with '${replacement_value}'`);\n    }\n    while (node = walker.nextNode()) {\n        if (node.nodeValue) {\n            const replaced_str = node.nodeValue.replace(search_regex, replacement_value);\n            if (node.nodeValue != replaced_str) {\n                node.nodeValue = replaced_str;\n                count++; // Of course, it might have been replaced multiple times by replaceAll. But this is just for debugging\n                // and performing an accurate count would impact the performace.\n            }\n        }\n    }\n    return count;\n};\nconst escapeHTML = (text) => {\n    const element = document.createElement(\"div\");\n    element.appendChild(document.createTextNode(text));\n    return element.innerHTML;\n};\nconst inner_html_replace = (root_element, search_regex, replacement_value) => {\n    // User supplied input, HTML escape it before we inject it in the page\n    replacement_value = escapeHTML(replacement_value);\n    if (!search_regex.global) {\n        console.warn(`You should set the global flag for the regex. Context: replacing '${search_regex.source}' with '${replacement_value}'`);\n    }\n    const new_value = root_element.innerHTML.replace(search_regex, replacement_value);\n    if (new_value != root_element.innerHTML) {\n        root_element.innerHTML = new_value;\n        return 1;\n    }\n    else {\n        return 0;\n    }\n};\nexport const create_dynamic_placeholder_element = (placeholder) => {\n    const span = document.createElement(\"span\");\n    span.classList.add(\"placeholder-value\");\n    span.dataset.placeholder = placeholder.name;\n    span.textContent = placeholder.expanded_value;\n    return span;\n};\nconst dynamic_replace = (root_element, search_regex, placeholder, search_for_pre_replaced) => {\n    var _a;\n    const walker = document.createTreeWalker(root_element, NodeFilter.SHOW_TEXT);\n    let node;\n    if (!search_regex.global) {\n        console.warn(`You should set the global flag for the regex. Context: replacing '${search_regex.source}' with '${placeholder.current_value}'`);\n    }\n    let existing_count = 0;\n    if (search_for_pre_replaced) {\n        const already_existing_wrappers = document.querySelectorAll(\".placeholder-value[data-placeholder]\");\n        for (const wrapper of already_existing_wrappers) {\n            if (wrapper.getAttribute(\"data-placeholder\") === placeholder.name) {\n                existing_count++;\n            }\n        }\n        if (existing_count > 0) {\n            logger.debug(`${existing_count} dynamic placeholder elements already exist for placeholder ${placeholder.name}`);\n        }\n    }\n    const nodes_to_modify = [];\n    while (node = walker.nextNode()) {\n        if (node.nodeValue) {\n            if (node.nodeValue.match(search_regex)) {\n                // Do not modify in-place while iterating over the DOM\n                nodes_to_modify.push(node);\n            }\n        }\n    }\n    // Do not put in the value yet, otherwise it may be replaced by other placeholders\n    const replacement_value = `<span class=\"placeholder-value\" data-placeholder=\"${escapeHTML(placeholder.name)}\">TEMPORARY PLACEHOLDER</span>`;\n    for (const node of nodes_to_modify) {\n        if (node.nodeValue) {\n            const replaced_str = escapeHTML(node.nodeValue).replace(search_regex, replacement_value);\n            const new_node = document.createElement(\"span\");\n            new_node.innerHTML = replaced_str;\n            (_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.replaceChild(new_node, node);\n        }\n    }\n    return nodes_to_modify.length + existing_count;\n};\nconst do_dynamic_replace = (root_element, placeholder, config) => {\n    const count = dynamic_replace(root_element, placeholder.regex_dynamic, placeholder, true);\n    if (count > 0) {\n        logger.debug(`Replaced ${placeholder.name} via dynamic method at least ${count} time(s)`);\n        placeholder.count_on_page += count;\n    }\n};\nconst do_normal_replace = (root_element, placeholder, config) => {\n    const count = dynamic_replace(root_element, placeholder.regex_normal, placeholder, false);\n    if (count > 0) {\n        logger.debug(`Replaced ${placeholder.name} via normal (dynamic) method at least ${count} time(s)`);\n        placeholder.count_on_page += count;\n    }\n};\nconst do_static_replace = (root_element, placeholder, config) => {\n    const count = static_replace(root_element, placeholder.regex_static, placeholder.expanded_value);\n    if (count > 0) {\n        logger.debug(`Replaced ${placeholder.name} via static method at least ${count} time(s)`);\n        placeholder.count_on_page += count;\n        placeholder.reload_page_on_change = true;\n    }\n};\nconst do_html_replace = (root_element, placeholder, config) => {\n    const count = inner_html_replace(root_element, placeholder.regex_html, placeholder.expanded_value);\n    if (count > 0) {\n        logger.debug(`Replaced ${placeholder.name} via innerHTML method at least ${count} time(s)`);\n        placeholder.count_on_page += count;\n        placeholder.reload_page_on_change = true;\n    }\n};\n// Replace all placeholders in the given order and return which placeholders actually were actually found in the page\nexport const replace_placeholders_in_subtree = (root_element, config) => {\n    for (const placeholder of config.placeholders.values()) {\n        do_dynamic_replace(root_element, placeholder, config);\n        do_normal_replace(root_element, placeholder, config);\n        do_static_replace(root_element, placeholder, config);\n        if (placeholder.allow_inner_html) {\n            do_html_replace(root_element, placeholder, config);\n        }\n    }\n    find_dynamic_placeholder_wrappers(config);\n    replace_dynamic_placeholder_values([...config.placeholders.values()]);\n};\nexport const safe_replace_multiple_placeholders_in_string = (text, placeholder_list) => {\n    // Optimize for trivial cases\n    if (placeholder_list.length == 0) {\n        return text;\n    }\n    else if (placeholder_list.length == 1) {\n        // We can directly replace it without any problems\n        const placeholder = placeholder_list[0];\n        return replace_placeholder_in_string_with(text, placeholder, placeholder.expanded_value);\n    }\n    else {\n        // If we just replace the values directly in a for loop, we get bugs, when the value of one placeholder contains another placeholder that is also replaced, but later\n        // To circumvent this, we replace placeholders with randomized other placeholders and then replace these with the actual values\n        const unique = `${Date.now()}_${Math.random()}`;\n        for (const placeholder of placeholder_list) {\n            text = replace_placeholder_in_string_with(text, placeholder, `x${placeholder.name}#${unique}x`);\n        }\n        for (const placeholder of placeholder_list) {\n            const regex = new RegExp(`x${placeholder.name}#${unique}x`, \"g\");\n            text = text.replace(regex, placeholder.expanded_value);\n        }\n        return text;\n    }\n};\nconst replace_placeholder_in_string_with = (text, placeholder, value) => {\n    // This funtion will perform replacements, but will ignore the replacement type (all will be simple/direct replace)\n    return text.replace(placeholder.regex_dynamic, value)\n        .replace(placeholder.regex_html, value)\n        .replace(placeholder.regex_normal, value)\n        .replace(placeholder.regex_static, value);\n};\nexport const replace_dynamic_placeholder_values = (placeholder_list) => {\n    for (const placeholder of placeholder_list) {\n        for (const element of placeholder.output_elements) {\n            // Delete current contents\n            element.innerHTML = \"\";\n            // Add the value back as safely escaped text\n            const text = document.createTextNode(placeholder.expanded_value);\n            element.appendChild(text);\n        }\n    }\n};\nconst find_dynamic_placeholder_wrappers = (config) => {\n    const output_list = document.querySelectorAll(\".placeholder-value[data-placeholder]\");\n    for (const element of output_list) {\n        const placeholder_name = element.getAttribute(\"data-placeholder\");\n        if (placeholder_name) {\n            const placeholder = config.placeholders.get(placeholder_name);\n            if (placeholder) {\n                placeholder.output_elements.push(element);\n            }\n            else {\n                console.warn(`No placeholder named '${placeholder_name}', that is referenced by element:`, element);\n            }\n        }\n        else {\n            console.warn(`Element has empty/no attribute 'data-placeholder':`, element);\n        }\n    }\n};\n","import { logger } from \"./debug\";\nimport { safe_replace_multiple_placeholders_in_string } from \"./replacer\";\nimport { clear_state } from \"./state_manager\";\n// Should be a directed acyclical graph\nexport class DependencyGraph {\n    constructor(placeholders) {\n        this.nodes = new Map();\n        for (const placeholder of placeholders.values()) {\n            this.nodes.set(placeholder.name, new GraphNode(placeholder));\n        }\n        // Needs to be in different loops to ensure that all nodes have been created first\n        for (const placeholder of placeholders.values()) {\n            try {\n                this.on_placeholder_value_change(placeholder);\n            }\n            catch (e) {\n                console.error(\"Error while building dependency graph\", e);\n                console.warn(\"Placeholder values may be inconsistent. Clearing your localStorage should fix this problem.\");\n                if (confirm(\"We detected a problem with your placeholder values. Resetting them to the defaults should fix this. Should we reset your placeholders?\")) {\n                    clear_state();\n                }\n            }\n        }\n        // Make sure that all expanded values are calculated\n        // We take every node with no downlinks (bottom of the graph) and do a recursive recalculation (upwards).\n        // Not super efficient, but simple to implement\n        for (const node of this.nodes.values()) {\n            if (node.downlinks.length == 0) {\n                node.recalculate_expanded_value(true);\n            }\n        }\n    }\n    debug_print_representation() {\n        let text = \"Dependency graph nodes (DEBUG view):\";\n        for (const node of this.nodes.values()) {\n            const dependencies = node.downlinks.map(n => n.placeholder.name).join(\", \");\n            if (dependencies.length == 0) {\n                text += `\\n${node.placeholder.name} (${node.placeholder.expanded_value}) has no dependencies`;\n            }\n            else {\n                text += `\\n${node.placeholder.name} (${node.placeholder.expanded_value}) depends on ${dependencies}`;\n            }\n        }\n        logger.debug(text);\n    }\n    unmark_everything() {\n        for (const node of this.nodes.values()) {\n            node.marked = false;\n        }\n    }\n    get_node(placeholder) {\n        const node = this.nodes.get(placeholder.name);\n        if (node == undefined) {\n            throw new Error(`Placeholder ${placeholder.name} is not part of the dependency graph`);\n        }\n        else {\n            return node;\n        }\n    }\n    on_placeholder_value_change(placeholder) {\n        const node = this.get_node(placeholder);\n        this.update_placeholder_downlinks(placeholder);\n        if (this.has_loop()) {\n            // Emergency measure: ignore any placeholders in this value. This should fix the loop\n            placeholder.expanded_value = placeholder.current_value;\n            node.downlinks = [];\n            // Also raise an exception to inform the user\n            throw new Error(`Placeholder ${placeholder.name} was part of a loop and has temporarily been made non-recursive`);\n        }\n        else {\n            node.recalculate_expanded_value(true);\n        }\n    }\n    get_all_marked() {\n        const marked = [];\n        for (const node of this.nodes.values()) {\n            if (node.marked) {\n                marked.push(node.placeholder);\n            }\n        }\n        return marked;\n    }\n    get_all_upstream(placeholder) {\n        this.unmark_everything();\n        const node = this.get_node(placeholder);\n        node.recursive_mark_upstream();\n        return this.get_all_marked();\n    }\n    update_placeholder_downlinks(placeholder) {\n        if (!placeholder.allow_nested) {\n            // By definition, non-recursive placeholders can not rely on other placeholders\n            logger.debug(`${placeholder.name} can not contain nested placeholders`);\n            return;\n        }\n        // Step 1: remove all old downlinks\n        const node = this.get_node(placeholder);\n        for (const old_downlink of node.downlinks) {\n            old_downlink.remove_uplink(node);\n        }\n        node.downlinks = [];\n        // Step 2: parse placeholder's value (again)\n        for (const other_node of this.nodes.values()) {\n            // No placeholder should directly be able to contain itself -> ignoring this case.\n            // This should lead to the placeholder's name appearing in it's text, which was probably intended\n            if (other_node != node) {\n                if (string_contains_placeholder(placeholder.current_value, other_node.placeholder)) {\n                    // This placeholders value contains a reference to the other node's placeholder\n                    //  -> This node depends on the other node\n                    node.downlinks.push(other_node);\n                    other_node.uplinks.push(node);\n                }\n            }\n        }\n    }\n    get_all_used_placeholders() {\n        // Also includes all placeholders used by the placeholders that were included\n        this.unmark_everything();\n        // Mark all used placeholders and their downstream nodes\n        for (const node of this.nodes.values()) {\n            if (node.placeholder.count_on_page > 0) {\n                node.recursive_mark_downstream();\n            }\n        }\n        return this.get_all_marked();\n    }\n    has_loop() {\n        // General algorithm: https://www.geeksforgeeks.org/detect-cycle-in-a-graph/\n        this.unmark_everything();\n        for (const node of this.nodes.values()) {\n            // Make sure that we check every single node (we likely have multiple graphs that are not connected)\n            if (!node.marked) {\n                if (this._has_loop([], node)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _has_loop(back_stack, current_node) {\n        const new_back_stack = [...back_stack, current_node];\n        const index = back_stack.indexOf(current_node);\n        if (index != -1) {\n            let message = \"Dependency cycle in placeholders detected:\";\n            for (let i = index; i < new_back_stack.length; i++) {\n                const placeholder = new_back_stack[i].placeholder;\n                message += `\\n$ -> ${placeholder.name}: ${placeholder.current_value}`;\n            }\n            console.warn(message);\n            return true;\n        }\n        else if (!current_node.marked) {\n            // No cycle found yet, scan all children that are not yet marked\n            current_node.marked = true;\n            for (const child of current_node.downlinks) {\n                if (this._has_loop(new_back_stack, child)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        else {\n            // Already checked, so no need to start recursive scans\n            return false;\n        }\n    }\n}\nconst string_contains_placeholder = (string_to_test, placeholder_to_find) => {\n    return placeholder_to_find.regex_dynamic.test(string_to_test) ||\n        placeholder_to_find.regex_html.test(string_to_test) ||\n        placeholder_to_find.regex_normal.test(string_to_test) ||\n        placeholder_to_find.regex_static.test(string_to_test);\n};\nclass GraphNode {\n    constructor(placeholder) {\n        // These other nodes depend on this node\n        this.uplinks = [];\n        // This are the nodes this node depends on\n        this.downlinks = [];\n        // State used during operations to see if this node was already visited/processed\n        this.marked = false;\n        this.placeholder = placeholder;\n    }\n    remove_uplink(node) {\n        this.uplinks = this.uplinks.filter(x => x != node);\n    }\n    recalculate_expanded_value(recursive) {\n        let expanded_value = this.placeholder.current_value;\n        if (this.placeholder.allow_nested) {\n            expanded_value = safe_replace_multiple_placeholders_in_string(expanded_value, this.downlinks.map(n => n.placeholder));\n        }\n        this.placeholder.expanded_value = expanded_value;\n        if (recursive) {\n            // Recalculate all uplink nodes in recursive too\n            for (const uplink_node of this.uplinks) {\n                uplink_node.recalculate_expanded_value(recursive);\n            }\n        }\n    }\n    recursive_mark_upstream() {\n        this.marked = true;\n        for (const node of this.uplinks) {\n            node.recursive_mark_upstream();\n        }\n    }\n    recursive_mark_downstream() {\n        this.marked = true;\n        for (const node of this.downlinks) {\n            node.recursive_mark_downstream();\n        }\n    }\n}\n","import { load_checkbox_state, load_dropdown_state, load_textbox_state, load_boolean_setting } from \"./state_manager\";\nimport { parse_validator } from \"./validator\";\nimport { DependencyGraph } from \"./dependency_graph\";\n// This should be a more type safe reimplementation of 10_parse_data.js.\n// It has some breaking changes, since I try to improve how the javascript code works\nexport const assert_field_type = (name, expected_type_str, parent_object) => {\n    const value = parent_object[name];\n    const actual_type_str = typeof (value);\n    if (actual_type_str != expected_type_str) {\n        throw new Error(`Type mismatch: ${name} should be ${expected_type_str}, but is ${actual_type_str}.\\nProblematic object: ${JSON.stringify(parent_object)}`);\n    }\n    else {\n        return value;\n    }\n};\n// These functions are here to make sure, that I the type checker can properly work (since they have a specific return type)\nexport const get_string_field = (name, parent_object) => {\n    return assert_field_type(name, \"string\", parent_object);\n};\nexport const get_boolean_field = (name, parent_object) => {\n    return assert_field_type(name, \"boolean\", parent_object);\n};\nconst get_number_field = (name, parent_object) => {\n    return assert_field_type(name, \"number\", parent_object);\n};\nexport const get_array_field = (name, element_type, parent_object) => {\n    const array = parent_object[name];\n    if (Array.isArray(array)) {\n        for (const [index, entry] of array.entries()) {\n            const actual_type_str = typeof (entry);\n            if (actual_type_str != element_type) {\n                const msg = `Type mismatch: ${name}'s ${index + 1}th element should be ${element_type}, but is ${actual_type_str}.\\nProblematic object: ${JSON.stringify(parent_object)}`;\n                throw new Error(msg);\n            }\n        }\n        return array;\n    }\n    else {\n        throw new Error(`Type mismatch: ${name} should be an array, but is not.\\nProblematic object: ${JSON.stringify(parent_object)}`);\n    }\n};\nexport var InputType;\n(function (InputType) {\n    InputType[\"Textbox\"] = \"TEXTBOX\";\n    InputType[\"Checkbox\"] = \"CHECKBOX\";\n    InputType[\"Dropdown\"] = \"DROPDOWN\";\n})(InputType || (InputType = {}));\nexport const parse_config = (data) => {\n    const placeholder_map = new Map();\n    const textboxes = new Map();\n    const checkboxes = new Map();\n    const dropdowns = new Map();\n    const validator_map = new Map();\n    const validator_data_list = get_array_field(\"validators\", \"object\", data);\n    for (const validator_data of validator_data_list) {\n        const validator = parse_validator(validator_data);\n        if (validator_map.has(validator.id)) {\n            throw new Error(`Multiple validators with id '${validator.id}'`);\n        }\n        else {\n            validator_map.set(validator.id, validator);\n        }\n    }\n    const settings_data = assert_field_type(\"settings\", \"object\", data);\n    const settings = parse_settings(settings_data);\n    const placeholder_data = get_array_field(\"placeholder_list\", \"object\", data);\n    for (let i = 0; i < placeholder_data.length; i++) {\n        const placeholder = parse_any_placeholder(placeholder_data[i], validator_map, settings, i);\n        // Add the placeholder to the correct lists\n        placeholder_map.set(placeholder.name, placeholder);\n        if (placeholder.type == InputType.Textbox) {\n            textboxes.set(placeholder.name, placeholder);\n        }\n        else if (placeholder.type == InputType.Checkbox) {\n            checkboxes.set(placeholder.name, placeholder);\n        }\n        else if (placeholder.type == InputType.Dropdown) {\n            dropdowns.set(placeholder.name, placeholder);\n        }\n        else {\n            console.warn(\"Unknown placeholder type:\", placeholder.type);\n        }\n    }\n    const graph = new DependencyGraph(placeholder_map);\n    return {\n        \"placeholders\": placeholder_map,\n        \"textboxes\": textboxes,\n        \"checkboxes\": checkboxes,\n        \"dropdowns\": dropdowns,\n        \"settings\": settings,\n        \"dependency_graph\": graph,\n        \"input_tables\": [],\n    };\n};\nconst parse_settings = (data) => {\n    const apply_change_on_focus_change_default = get_boolean_field(\"apply_change_on_focus_change\", data);\n    const debug_default = get_boolean_field(\"debug\", data);\n    const expand_auto_tables_default = get_boolean_field(\"expand_auto_tables\", data);\n    return {\n        \"apply_change_on_focus_change\": load_boolean_setting(\"apply_change_on_focus_change\", apply_change_on_focus_change_default),\n        \"debug\": load_boolean_setting(\"debug\", debug_default),\n        \"delay_millis\": get_number_field(\"delay_millis\", data),\n        \"expand_auto_tables\": load_boolean_setting(\"expand_auto_tables\", expand_auto_tables_default),\n        \"highlight_placeholders\": load_boolean_setting(\"highlight_placeholders\", false),\n        // How normal placeholders are marked\n        \"normal_prefix\": get_string_field(\"normal_prefix\", data),\n        \"normal_suffix\": get_string_field(\"normal_suffix\", data),\n        // How placeholders using the innerHTML method are marked\n        \"html_prefix\": get_string_field(\"html_prefix\", data),\n        \"html_suffix\": get_string_field(\"html_suffix\", data),\n        // How placeholders using the direct/static replacement methodare marked\n        \"static_prefix\": get_string_field(\"static_prefix\", data),\n        \"static_suffix\": get_string_field(\"static_suffix\", data),\n        // How placeholders using the dynamic replacement methodare marked\n        \"dynamic_prefix\": get_string_field(\"dynamic_prefix\", data),\n        \"dynamic_suffix\": get_string_field(\"dynamic_suffix\", data),\n    };\n};\nconst escapeRegExp = (regex_pattern) => {\n    // @SOURCE https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n    return regex_pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\nconst parse_any_placeholder = (data, validator_map, settings, index) => {\n    const type = get_string_field(\"type\", data);\n    // Parse fields that are shared between all placeholders\n    const name = get_string_field(\"name\", data);\n    let parsed = {\n        \"name\": name,\n        \"order_index\": index,\n        // The regexes for the different replace methods. Stored here so that I only need to compile them once\n        \"regex_dynamic\": RegExp(escapeRegExp(settings.dynamic_prefix) + name + escapeRegExp(settings.dynamic_suffix), \"g\"),\n        \"regex_html\": RegExp(escapeRegExp(settings.html_prefix) + name + escapeRegExp(settings.html_suffix), \"g\"),\n        \"regex_normal\": RegExp(escapeRegExp(settings.normal_prefix) + name + escapeRegExp(settings.normal_suffix), \"g\"),\n        \"regex_static\": RegExp(escapeRegExp(settings.static_prefix) + name + escapeRegExp(settings.static_suffix), \"g\"),\n        // \n        \"description\": get_string_field(\"description\", data),\n        \"read_only\": get_boolean_field(\"read_only\", data),\n        \"allow_inner_html\": get_boolean_field(\"allow_inner_html\", data),\n        \"allow_nested\": get_boolean_field(\"allow_nested\", data),\n        \"current_value\": \"UNINITIALIZED\",\n        \"expanded_value\": \"UNINITIALIZED\",\n        \"count_on_page\": 0,\n        \"reload_page_on_change\": false,\n        \"output_elements\": [], // Will be set, when the page is searched\n    };\n    // Parse the type specific attributes\n    if (type === \"textbox\") {\n        const placeholder = finish_parse_textbox(parsed, data, validator_map);\n        load_textbox_state(placeholder);\n        return placeholder;\n    }\n    else if (type == \"checkbox\") {\n        const placeholder = finish_parse_checkbox(parsed, data);\n        load_checkbox_state(placeholder);\n        return placeholder;\n    }\n    else if (type == \"dropdown\") {\n        const placeholder = finish_parse_dropdown(parsed, data);\n        load_dropdown_state(placeholder);\n        return placeholder;\n    }\n    else {\n        throw new Error(`Unsupported placeholder type '${type}'`);\n    }\n};\nconst finish_parse_textbox = (parsed, data, validator_map) => {\n    let default_function, default_value;\n    if (data[\"default_value\"] != undefined) {\n        default_value = get_string_field(\"default_value\", data);\n    }\n    else {\n        const default_js_code = get_string_field(\"default_function\", data);\n        default_function = () => {\n            // Wrap the function, so that we can ensure that errors are properly handled\n            try {\n                const compiled_function = new Function(default_js_code);\n                const result = compiled_function();\n                if (typeof (result) != \"string\") {\n                    throw new Error(`Custom function '${default_js_code}' should return a string, but it returned a ${typeof (result)}: ${result}`);\n                }\n                else {\n                    return result;\n                }\n            }\n            catch (error) {\n                throw new Error(`Failed to evaluate default_function '${default_js_code}' of placeholder ${parsed.name}: ${error}`);\n            }\n        };\n    }\n    const validator_names = get_array_field(\"validators\", \"string\", data);\n    const validator_list = [];\n    for (const name of validator_names) {\n        const validator = validator_map.get(name);\n        if (validator) {\n            validator_list.push(validator);\n        }\n        else {\n            const known_validators = Array.from(validator_map.keys()).join(\", \");\n            throw new Error(`No validator with id '${name}' was found. Known validators are ${known_validators}`);\n        }\n    }\n    return Object.assign(Object.assign({}, parsed), { \"default_function\": default_function, \"default_value\": default_value, \"input_elements\": [], \"type\": InputType.Textbox, \"validators\": validator_list });\n};\nconst finish_parse_checkbox = (parsed, data) => {\n    return Object.assign(Object.assign({}, parsed), { \"checked_by_default\": get_boolean_field(\"checked_by_default\", data), \"current_is_checked\": false, \"input_elements\": [], \"value_checked\": get_string_field(\"value_checked\", data), \"value_unchecked\": get_string_field(\"value_unchecked\", data), \"type\": InputType.Checkbox });\n};\nconst finish_parse_dropdown = (parsed, data) => {\n    const raw_options = get_array_field(\"options\", \"object\", data);\n    const options = [];\n    for (const option of raw_options) {\n        options.push({\n            display_name: get_string_field(\"display_name\", option),\n            value: get_string_field(\"value\", option),\n        });\n    }\n    const default_index = get_number_field(\"default_index\", data);\n    if (default_index < 0) {\n        throw new Error(`Invalid value: \"default_index\" should not be negative, but is ${default_index}.\\nProblematic object: ${JSON.stringify(data)}`);\n    }\n    else if (default_index >= options.length) {\n        throw new Error(`Invalid value: \"default_index\" should be smaller than the number of options (${options.length}), but is ${default_index}.\\nProblematic object: ${JSON.stringify(data)}`);\n    }\n    return Object.assign(Object.assign({}, parsed), { \"current_index\": 0, \"default_index\": default_index, \"input_elements\": [], \"options\": options, \"type\": InputType.Dropdown });\n};\n","import { logger } from \"./debug\";\nimport { prepare_input_field } from \"./inputs\";\nimport { create_dynamic_placeholder_element } from \"./replacer\";\nimport { clear_settings, clear_state, store_boolean_setting } from \"./state_manager\";\nconst TABLE_CELL_HEADINGS = new Map();\nTABLE_CELL_HEADINGS.set(\"name\", \"Name\");\nTABLE_CELL_HEADINGS.set(\"description\", \"Description\");\nTABLE_CELL_HEADINGS.set(\"value\", \"Value\");\nTABLE_CELL_HEADINGS.set(\"input\", \"Input element\");\nTABLE_CELL_HEADINGS.set(\"description-or-name\", \"Description / name\");\n// Created myself, so no licensing issues should occur. Still, a decent unicode / font awesome icon may be better if it works across themes/operating systems/browsers\nconst GEAR_SVG = `<svg viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\">\n <path id=\"svg_6\" d=\"m7.79338,20.02127l0,0c0,-6.84327 5.74307,-12.39083 12.82751,-12.39083l0,0c3.40207,0 6.6648,1.30546 9.07042,3.62919c2.40563,2.32373 3.75709,5.47539 3.75709,8.76164l0,0c0,6.84327 -5.74307,12.39083 -12.82751,12.39083l0,0c-7.08444,0 -12.82751,-5.54757 -12.82751,-12.39083zm6.41376,0l0,0c0,3.42163 2.87154,6.19542 6.41376,6.19542c3.54222,0 6.41376,-2.77378 6.41376,-6.19542c0,-3.42163 -2.87154,-6.19542 -6.41376,-6.19542l0,0c-3.54222,0 -6.41376,2.77378 -6.41376,6.19542z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path id=\"svg_7\" d=\"m17.46095,7.63098l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(180, 20.9544, 35.1419)\" id=\"svg_11\" d=\"m17.57012,37.76199l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(43, 31.5439, 9.59605)\" id=\"svg_12\" d=\"m28.15964,12.21614l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(90, 35.9107, 19.8581)\" id=\"svg_13\" d=\"m32.52645,22.47815l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(135, 31.7623, 30.2292)\" id=\"svg_14\" d=\"m28.37798,32.84933l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(-45, 9.49152, 9.48688)\" id=\"svg_15\" d=\"m6.10724,12.10697l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(-90, 5.01553, 19.9672)\" id=\"svg_16\" d=\"m1.63126,22.58732l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n <path transform=\"rotate(-135, 9.60069, 30.7751)\" id=\"svg_17\" d=\"m6.21641,33.39518l1.2691,-5.24017l4.23035,0l1.2691,5.24017l-6.76856,0z\" stroke=\"#fff\" fill=\"#ffffff\"/>\n</svg>`;\n// Helper functions to simplify the following code\nconst appendTextNode = (element, text) => {\n    element.appendChild(document.createTextNode(text));\n};\nconst createChildElement = (parent, tag_name) => {\n    const child = document.createElement(tag_name);\n    parent.appendChild(child);\n    return child;\n};\nconst convert_to_dynamic_placeholder_table = (config, element, content_element) => {\n    // Remove the current contents. This enables the plugin to generate fallback contents in case the JavaScript code does not work\n    element.innerHTML = \"\";\n    const title = createChildElement(element, \"div\");\n    const title_text = createChildElement(title, \"div\");\n    const settings_button = createChildElement(title, \"div\");\n    const expandable_contents = createChildElement(element, \"div\");\n    const settings_contents = createChildElement(expandable_contents, \"div\");\n    expandable_contents.append(content_element);\n    const update_expanded_state = (is_expanded) => {\n        expandable_contents.style.display = is_expanded ? \"flex\" : \"none\";\n        title_text.textContent = \"Placeholders: Click here to \" + (is_expanded ? \"collapse\" : \"expand\");\n    };\n    title.classList.add(\"auto-table-title\");\n    expandable_contents.classList.add(\"expandable_contents\");\n    settings_contents.classList.add(\"settings_contents\");\n    let expanded = config.settings.expand_auto_tables;\n    update_expanded_state(expanded);\n    title_text.addEventListener(\"click\", () => {\n        expanded = !expanded;\n        update_expanded_state(expanded);\n    });\n    title_text.classList.add(\"text\");\n    prepare_settings_button(settings_button, settings_contents, () => {\n        if (!expanded) {\n            expanded = true;\n            update_expanded_state(expanded);\n        }\n    });\n    fill_settings_content_container(config, settings_contents);\n};\nconst prepare_settings_button = (settings_button, settings_contents, expand_if_needed) => {\n    let show_settings = false;\n    settings_button.onclick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        show_settings = !show_settings;\n        settings_contents.style.display = show_settings ? \"flex\" : \"none\";\n        if (show_settings) {\n            expand_if_needed();\n        }\n    };\n    settings_contents.style.display = show_settings ? \"flex\" : \"none\";\n    settings_button.classList.add(\"settings_button\");\n    settings_button.innerHTML = GEAR_SVG;\n    settings_button.title = \"Hide / show settings\";\n};\nconst fill_settings_content_container = (config, settings_contents) => {\n    const set_highlight_placeholders = (enabled) => {\n        for (const placeholder of config.placeholders.values()) {\n            for (const output of placeholder.output_elements) {\n                if (enabled) {\n                    output.classList.add(\"placeholder-value-highlighted\");\n                }\n                else {\n                    output.classList.remove(\"placeholder-value-highlighted\");\n                }\n            }\n        }\n    };\n    set_highlight_placeholders(config.settings.highlight_placeholders);\n    createChildElement(settings_contents, \"b\").textContent = \"Settings\";\n    // @TODO: later: when there are multiple settings dialogs, keep their values in sync\n    append_boolean_setting_checkbox(settings_contents, config.settings.expand_auto_tables, \"expand_auto_tables\", \"Expand placeholder tables by default*\");\n    append_boolean_setting_checkbox(settings_contents, config.settings.apply_change_on_focus_change, \"apply_change_on_focus_change\", \"Apply value when focus changes away*\");\n    append_boolean_setting_checkbox(settings_contents, config.settings.debug, \"debug\", \"Log JavaScript debug messages to console*\");\n    append_boolean_setting_checkbox(settings_contents, config.settings.highlight_placeholders, \"highlight_placeholders\", \"Highlight placeholders (useful for debugging)\", set_highlight_placeholders);\n    createChildElement(settings_contents, \"i\").textContent = \"* You need to reload the page for these settings to take effect.\";\n    const settings_button_bar = createChildElement(settings_contents, \"div\");\n    settings_button_bar.classList.add(\"button-bar\");\n    const settings_reset_button = createChildElement(settings_button_bar, \"button\");\n    settings_reset_button.textContent = \"Reset settings\";\n    settings_reset_button.addEventListener(\"click\", clear_settings);\n    const placeholder_reset_button = createChildElement(settings_button_bar, \"button\");\n    placeholder_reset_button.textContent = \"Reset all placeholders\";\n    placeholder_reset_button.addEventListener(\"click\", clear_state);\n};\nconst append_boolean_setting_checkbox = (parent_element, value, name, label_text, custom_on_change = (enabled) => { }) => {\n    const label = createChildElement(parent_element, \"label\");\n    label.textContent = `${label_text} `;\n    const checkbox = createChildElement(label, \"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.checked = value;\n    checkbox.addEventListener(\"change\", () => {\n        store_boolean_setting(name, checkbox.checked);\n        custom_on_change(checkbox.checked);\n    });\n};\nconst generate_automatic_placeholder_table = (element, columns, config, placeholders_to_show, show_empty) => {\n    placeholders_to_show = sort_and_remove_duplicate_placeholders(placeholders_to_show);\n    const root_element = document.createElement(\"div\");\n    if (placeholders_to_show.length == 0) {\n        if (show_empty) {\n            root_element.textContent = \"No placeholders to be shown\";\n        }\n        else {\n            // Remove the table placeholder\n            element.remove();\n            // No need constructing something that is never added to the DOM -> return immediately\n            return;\n        }\n    }\n    else {\n        logger.info(\"Creating automatic input table at\", element, \"with columns\", columns);\n        root_element.classList.add(\"table-div\");\n        createChildElement(root_element, \"b\").innerHTML = \"Enter different values in the table below and press <code>Enter</code> to update this page.\";\n        const table = createChildElement(root_element, \"table\");\n        const table_head = createChildElement(table, \"thead\");\n        const table_head_row = createChildElement(table_head, \"tr\");\n        const table_body = createChildElement(table, \"tbody\");\n        for (const column of columns) {\n            const table_cell = createChildElement(table_head_row, \"th\");\n            const heading = TABLE_CELL_HEADINGS.get(column);\n            if (heading) {\n                appendTextNode(table_cell, heading);\n            }\n            else {\n                appendTextNode(table_cell, column);\n                console.error(`Unknown column name: ${column}`);\n            }\n        }\n        const rows = [];\n        for (const placeholder of placeholders_to_show) {\n            if (placeholder.read_only) {\n                logger.debug(`auto_table: Skipping ${placeholder.name} because it is read-only`);\n                continue;\n            }\n            const row = createChildElement(table_body, \"tr\");\n            populate_auto_table_row(row, placeholder, columns, config);\n            rows.push({\n                \"element\": row,\n                \"placeholder\": placeholder,\n            });\n        }\n        config.input_tables.push({\n            \"columns\": columns,\n            \"table_element\": table,\n            \"rows\": rows,\n        });\n    }\n    // Wrap the result in a collapsible wrapper\n    convert_to_dynamic_placeholder_table(config, element, root_element);\n};\nconst sort_and_remove_duplicate_placeholders = (placeholder_list) => {\n    return [...new Set(placeholder_list)].sort((a, b) => a.order_index - b.order_index);\n};\nconst populate_auto_table_row = (row, placeholder, columns, config) => {\n    for (const column of columns) {\n        const cell = createChildElement(row, \"td\");\n        if (column == \"name\") {\n            appendTextNode(cell, placeholder.name);\n        }\n        else if (column == \"description\") {\n            appendTextNode(cell, placeholder.description);\n        }\n        else if (column == \"value\") {\n            const dynamic_placeholer = create_dynamic_placeholder_element(placeholder);\n            cell.appendChild(dynamic_placeholer);\n            placeholder.output_elements.push(dynamic_placeholer);\n        }\n        else if (column == \"input\") {\n            const input = createChildElement(cell, \"input\");\n            prepare_input_field(config, placeholder, input);\n        }\n        else if (column == \"description-or-name\") {\n            const text = placeholder.description || placeholder.name;\n            appendTextNode(cell, text);\n        }\n        else {\n            console.error(`Unknown column name: ${column}`);\n        }\n    }\n};\nconst update_auto_table = (config, table, new_placeholder_list) => {\n    // Sort them the same way they are sorted in the table -> lists are easy to compare\n    new_placeholder_list = sort_and_remove_duplicate_placeholders(new_placeholder_list);\n    // Step 1: remove rows that are no longer to be shown\n    const rows_to_keep = [];\n    for (const row of table.rows) {\n        if (new_placeholder_list.includes(row.placeholder)) {\n            rows_to_keep.push(row);\n        }\n        else {\n            logger.debug(`Removed table row for ${row.placeholder.name}:`, row.element);\n            row.element.remove();\n        }\n    }\n    // Step 2: add rows that do not yet exist\n    const final_rows = [];\n    const reversed_current = [...rows_to_keep].reverse();\n    const reversed_new = [...new_placeholder_list].reverse();\n    let next_new;\n    while (next_new = reversed_new.pop()) {\n        // const next_new = reversed_new.pop();\n        const next_current = reversed_current.slice(-1)[0];\n        if (next_current && next_current.placeholder === next_new) {\n            // The row is already in the table\n            reversed_current.pop(); // remove from queue to keep in sync with other queue\n            final_rows.push(next_current);\n        }\n        else {\n            const element = document.createElement(\"tr\");\n            // insert at the correct position in the dom\n            if (final_rows.length == 0) {\n                // adds it before the first child or if it does not exist at the end (which would also be the first element :D)\n                table.table_element.insertBefore(element, table.table_element.firstChild);\n            }\n            else {\n                // insert it after the last row that was processed\n                const last_node = final_rows[final_rows.length - 1].element;\n                last_node.insertAdjacentElement(\"afterend\", element);\n            }\n            populate_auto_table_row(element, next_new, table.columns, config);\n            final_rows.push({\n                \"element\": element,\n                \"placeholder\": next_new,\n            });\n            logger.debug(`Added table row for ${next_new.name}:`, element);\n        }\n    }\n    // Store the updated row information in the original table object\n    table.rows = final_rows;\n};\nexport const update_all_auto_tables = (config) => {\n    logger.debug(`Updating ${config.input_tables.length} automatic input tables`);\n    if (config.input_tables.length > 0) {\n        const new_placeholder_list = config.dependency_graph.get_all_used_placeholders();\n        for (const table of config.input_tables) {\n            update_auto_table(config, table, new_placeholder_list);\n        }\n    }\n};\nexport const initialize_auto_tables = (config) => {\n    const element_list = document.querySelectorAll(\"div.auto-input-table\");\n    if (element_list.length > 0) {\n        const used_placeholders = config.dependency_graph.get_all_used_placeholders().filter(x => !x.read_only);\n        for (const element of element_list) {\n            if (element instanceof HTMLElement) {\n                const columns_str = element.getAttribute(\"data-columns\") || \"name,input\";\n                const columns = columns_str.includes(\",\") ? columns_str.split(\",\") : [columns_str];\n                const show_empty = element.getAttribute(\"data-hide-empty\") === null;\n                generate_automatic_placeholder_table(element, columns, config, used_placeholders, show_empty);\n            }\n            else {\n                console.warn(\"Element\", element, \"is expected to be an HTMLElement, but is not\");\n            }\n        }\n    }\n};\n","import { update_all_auto_tables } from \"./auto_tables\";\nimport { logger, reload_page } from \"./debug\";\nimport { InputType } from \"./parse_settings\";\nimport { replace_dynamic_placeholder_values } from \"./replacer\";\nimport { store_checkbox_state, store_dropdown_state, store_textbox_state } from \"./state_manager\";\nimport { validate_textbox_input_field } from \"./validator\";\nexport const initialize_all_input_fields = (config) => {\n    const input_list = document.querySelectorAll(\"input[data-input-for], select[data-input-for]\");\n    for (let input_element of input_list) {\n        const placeholder_name = input_element.getAttribute(\"data-input-for\");\n        if (placeholder_name == null) {\n            throw new Error(\"How can this be, the selector forces the 'data-input-for' attribute to exist\");\n        }\n        const placeholder = config.placeholders.get(placeholder_name);\n        if (placeholder) {\n            prepare_input_field(config, placeholder, input_element);\n        }\n        else {\n            console.warn(`Unknown placeholder referenced in input element: '${placeholder_name}'`);\n            input_element.classList.add(\"input-for-variable\");\n            input_element.value = `ERROR_UNDEFINED_PLACEHOLDER: ${placeholder_name}`;\n        }\n    }\n};\nexport const prepare_input_field = (config, placeholder, input_element) => {\n    input_element.classList.add(\"input-for-variable\");\n    if (placeholder.type == InputType.Checkbox) {\n        initialize_input_checkbox(config, placeholder, input_element);\n    }\n    else if (placeholder.type == InputType.Dropdown) {\n        initialize_input_dropdown(config, placeholder, input_element);\n    }\n    else if (placeholder.type == InputType.Textbox) {\n        initialize_input_textbox(config, placeholder, input_element);\n    }\n    else {\n        console.error(`Placeholder ${placeholder.name} has unknown type '${placeholder.type}'`);\n    }\n};\nconst initialize_input_checkbox = (config, placeholder, input_element) => {\n    if (input_element.tagName != \"INPUT\") {\n        console.warn(`Input element/tag for placeholder '${placeholder.name}' is expected to be INPUT, but is ${input_element.tagName}. Skipping`, input_element);\n        return;\n    }\n    input_element.type = \"checkbox\";\n    input_element.checked = placeholder.current_is_checked;\n    if (placeholder.read_only) {\n        // disable the checkbox\n        input_element.disabled = true;\n    }\n    else {\n        input_element.disabled = false;\n        // Listen for state changes\n        input_element.addEventListener(\"change\", () => {\n            logger.debug(\"Checkbox change\", placeholder.name, \"- new value:\", input_element.checked);\n            store_checkbox_state(placeholder, input_element.checked);\n            placeholder.current_value = input_element.checked ? placeholder.value_checked : placeholder.value_unchecked;\n            on_placeholder_change(config, placeholder);\n        });\n    }\n    // Store this input element\n    placeholder.input_elements.push(input_element);\n};\nconst initialize_input_dropdown = (config, placeholder, input_element) => {\n    const new_node = document.createElement(\"select\");\n    new_node.classList.add(\"placeholder-dropdown\");\n    for (const option of placeholder.options) {\n        const option_element = document.createElement(\"option\");\n        option_element.text = option.display_name; // @TODO: allow placeholders in here\n        new_node.appendChild(option_element);\n    }\n    // Replace input element entirely with the dropdown menu\n    if (input_element.parentNode) {\n        input_element.parentNode.replaceChild(new_node, input_element);\n    }\n    else {\n        // How would we find it in the DOM if it has no parent?\n        console.error(`Input element`, input_element, `for placeholder ${placeholder.name} has no parent!`);\n    }\n    // Select the stored option\n    new_node.selectedIndex = placeholder.current_index;\n    if (placeholder.read_only) {\n        // disable the dropdown\n        new_node.disabled = true;\n    }\n    else {\n        new_node.disabled = false;\n        // Add an event listener\n        new_node.addEventListener(\"change\", () => {\n            logger.debug(\"Dropdown change\", placeholder.name, \"- new index:\", new_node.selectedIndex);\n            store_dropdown_state(placeholder, new_node.selectedIndex);\n            placeholder.current_index = new_node.selectedIndex;\n            placeholder.current_value = placeholder.options[new_node.selectedIndex].value;\n            on_placeholder_change(config, placeholder);\n        });\n    }\n    // Store this input element\n    placeholder.input_elements.push(new_node);\n};\nconst initialize_input_textbox = (config, placeholder, input_element) => {\n    if (input_element.tagName != \"INPUT\") {\n        console.warn(`Input element/tag for placeholder '${placeholder.name}' is expected to be INPUT, but is ${input_element.tagName}. Skipping`, input_element);\n        return;\n    }\n    // Restore the stored state\n    input_element.value = placeholder.current_value;\n    if (placeholder.read_only) {\n        // disable the checkbox\n        input_element.disabled = true;\n        input_element.style.cursor = \"not-allowed\";\n    }\n    else {\n        input_element.disabled = false;\n        if (placeholder.default_value != undefined) {\n            input_element.placeholder = `Default: ${placeholder.default_value}`;\n        }\n        else {\n            input_element.placeholder = \"Dynamic default value\";\n        }\n        const confirm_change = () => {\n            if (placeholder.current_value == input_element.value) {\n                logger.debug(`Value for placeholder ${placeholder.name} was not changed`);\n            }\n            else {\n                // Expensive actions, only perform them if the value was actually changed\n                if (validate_textbox_input_field(placeholder, input_element)) {\n                    store_textbox_state(placeholder, input_element.value);\n                    placeholder.current_value = input_element.value;\n                    on_placeholder_change(config, placeholder);\n                    // The new value is applied, so it now is the same as the stored one\n                    input_element.classList.remove(\"value-modified\");\n                }\n            }\n        };\n        // Check if initial value is valid and initialize the tooltip\n        validate_textbox_input_field(placeholder, input_element);\n        // Listen for state changes\n        input_element.addEventListener(\"input\", () => {\n            // The text was probably modified, so we need to update the validator\n            validate_textbox_input_field(placeholder, input_element);\n            // Update the changed status of the placeholder\n            if (input_element.value == placeholder.current_value) {\n                input_element.classList.remove(\"value-modified\");\n            }\n            else {\n                input_element.classList.add(\"value-modified\");\n            }\n        });\n        input_element.addEventListener(\"keypress\", (event) => {\n            if (event.key === \"Enter\") {\n                logger.debug(\"Textbox change confirmed with Enter key for\", placeholder.name, \"- new value:\", input_element.value);\n                confirm_change();\n            }\n        });\n        input_element.addEventListener(\"keydown\", (event) => {\n            // I have no idea, why Escape does not work with the keypress event (Safari on MacOS). As a work aroud, we listen to the keydown event\n            if (event.key === \"Escape\") {\n                logger.debug(\"Resetting input field for \", placeholder.name, \" to current placeholder value\");\n                input_element.value = placeholder.current_value;\n            }\n        });\n        input_element.addEventListener(\"focusout\", () => {\n            // The value may change on the fly (use changes settings), so we can not just conditionally add the event listener, but need to check each time\n            if (config.settings.apply_change_on_focus_change) {\n                logger.debug(\"Textbox change confirmed by changing focus\", placeholder.name, \"- new value:\", input_element.value);\n                confirm_change();\n            }\n        });\n    }\n    // Store this input element\n    placeholder.input_elements.push(input_element);\n};\nconst on_placeholder_change = (config, placeholder) => {\n    const affected_placeholders = config.dependency_graph.get_all_upstream(placeholder);\n    let require_reload = false;\n    for (const ph of affected_placeholders) {\n        require_reload = require_reload || ph.reload_page_on_change;\n    }\n    logger.debug(`Change of ${placeholder.name} requires updates for placeholders:\\n${affected_placeholders.map(p => ` - ${p.name}\\n`).join(\"\")}\\nRequires reload: ${require_reload}`);\n    if (require_reload) {\n        reload_page(); // for now we just use the full reload\n    }\n    else {\n        config.dependency_graph.on_placeholder_value_change(placeholder);\n        // update auto-tables, since downstream may be changed\n        update_all_auto_tables(config);\n        // Update all input elements for the modified placeholder\n        if (placeholder.type == InputType.Checkbox) {\n            const ph = placeholder;\n            for (const input_element of ph.input_elements) {\n                input_element.checked = ph.current_is_checked;\n            }\n        }\n        else if (placeholder.type == InputType.Dropdown) {\n            const ph = placeholder;\n            for (const input_element of ph.input_elements) {\n                input_element.selectedIndex = ph.current_index;\n            }\n        }\n        else if (placeholder.type == InputType.Textbox) {\n            const ph = placeholder;\n            for (const input_element of ph.input_elements) {\n                input_element.value = ph.current_value;\n                validate_textbox_input_field(ph, input_element);\n            }\n        }\n        else {\n            console.warn(`Placeholder ${placeholder.name} has unexpected type '${placeholder.type}'`);\n        }\n        // @TODO Not needed as long as the dropdown display name is static\n        // // Update input elements\n        // for (const ph of affected_placeholders) {\n        //     // Only dropdown's input elements can depend on other placeholders (the label)\n        //     if (ph.type == InputType.Dropdown) {\n        //         for (const input of (ph as DropdownPlaceholder).input_elements) {\n        //             // code here\n        //         }\n        //     }\n        // }\n        // Update output elements\n        replace_dynamic_placeholder_values(affected_placeholders);\n    }\n};\n","import { parse_config } from \"./parse_settings\";\nimport { init_logging, logger } from \"./debug\";\nimport { replace_placeholders_in_subtree } from \"./replacer\";\nimport { initialize_all_input_fields } from \"./inputs\";\nimport { export_api_functions } from \"./api\";\nimport { initialize_auto_tables } from \"./auto_tables\";\nexport const main = () => {\n    const config = parse_config(window.PlaceholderPluginConfigJson);\n    init_logging(config.settings.debug);\n    logger.info(\"PluginConfig\", config);\n    export_api_functions(config);\n    const delay_millis = config.settings.delay_millis;\n    // Then do the placeholder replacing at the user-specified time\n    if (delay_millis < 0) {\n        // For values smaller than 0, immediately do the replacements\n        do_plugin_stuff(config);\n    }\n    else if (delay_millis == 0) {\n        // Replace placeholders as soon as the page finished loading\n        window.addEventListener(\"load\", () => do_plugin_stuff(config));\n    }\n    else {\n        // Wait the amount of millis specified by the user\n        window.addEventListener(\"load\", () => {\n            setTimeout(() => do_plugin_stuff(config), delay_millis);\n        });\n    }\n};\nconst do_plugin_stuff = (config) => {\n    replace_placeholders_in_subtree(document.body, config);\n    config.dependency_graph.debug_print_representation();\n    initialize_all_input_fields(config);\n    initialize_auto_tables(config);\n};\n","import { debug_disable_reload } from \"./debug\";\nexport const export_api_functions = (config) => {\n    window.PlaceholderPlugin = {\n        \"settings\": config.settings,\n        \"placeholders\": config.placeholders,\n        \"debug_disable_reload\": debug_disable_reload,\n        \"debug_print_dependency_graph\": () => config.dependency_graph.debug_print_representation(),\n    };\n};\n","import { main } from \"./main\";\n// If the data is loaded via another script, make it work in any order\nif (window.PlaceholderPluginConfigJson) {\n    main();\n}\nelse {\n    document.addEventListener(\"PlaceholderPluginConfigJson\", main);\n}\n"],"names":["timestamp","Date","toISOString","slice","is_reload_enabled","internal_log","args","console","log","apply","arguments","internal_info","info","internal_debug","debug","noop","reload_page","window","location","reload","noop_logger","logger","debug_disable_reload","ValidatorSeverity","PlaceholderValidatity","parse_validator","data","rules","get_array_field","length","Error","JSON","stringify","id","get_string_field","map","x","parse_rule","is_valid_value","validator","value","rule","is_match_function","should_match","severity","is_valid_value_for_placeholder","placeholder","validators","validate_value","warnings","errors","push","display_name","error_message","Warning","warn","placeholder_is_good","message","v","Good","validator_id","severity_str","regex","compiled_regex","RegExp","test","match_function_body","match_function","Function","result","error","get_boolean_field","validate_textbox_input_field","input_field","result_list","has_no_error","lines","join","placeholder_is_warning","placeholder_is_error","NoValidator","validate_placeholder_value","validation_result","classList","remove","rating","add","title","update_tooltip","name","STORAGE_PREFIX","SETTINGS_PREFIX","store_value","localStorage","setItem","load_value","getItem","load_boolean_setting","default_value","stored","clear_state","clear_by_prefix","clear_settings","prefix","i","key","startsWith","removeItem","is_valid_index","index","item","options","undefined","store_textbox_state","new_value","is_validation_ok","escapeHTML","text","element","document","createElement","appendChild","createTextNode","innerHTML","create_dynamic_placeholder_element","span","dataset","textContent","expanded_value","dynamic_replace","root_element","search_regex","search_for_pre_replaced","_a","walker","createTreeWalker","NodeFilter","SHOW_TEXT","node","global","source","current_value","existing_count","already_existing_wrappers","querySelectorAll","wrapper","getAttribute","nodes_to_modify","nextNode","nodeValue","match","replacement_value","replaced_str","replace","new_node","parentElement","replaceChild","do_dynamic_replace","config","count","regex_dynamic","count_on_page","do_normal_replace","regex_normal","do_static_replace","static_replace","regex_static","reload_page_on_change","do_html_replace","inner_html_replace","regex_html","replace_placeholder_in_string_with","replace_dynamic_placeholder_values","placeholder_list","output_elements","DependencyGraph","constructor","placeholders","this","nodes","Map","values","set","GraphNode","on_placeholder_value_change","e","confirm","downlinks","recalculate_expanded_value","debug_print_representation","dependencies","n","unmark_everything","marked","get_node","get","update_placeholder_downlinks","has_loop","get_all_marked","get_all_upstream","recursive_mark_upstream","allow_nested","old_downlink","remove_uplink","other_node","string_contains_placeholder","uplinks","get_all_used_placeholders","recursive_mark_downstream","_has_loop","back_stack","current_node","new_back_stack","indexOf","child","string_to_test","placeholder_to_find","filter","recursive","unique","now","Math","random","safe_replace_multiple_placeholders_in_string","uplink_node","assert_field_type","expected_type_str","parent_object","actual_type_str","get_number_field","element_type","array","Array","isArray","entry","entries","msg","InputType","escapeRegExp","regex_pattern","parse_any_placeholder","validator_map","settings","type","parsed","dynamic_prefix","dynamic_suffix","html_prefix","html_suffix","normal_prefix","normal_suffix","static_prefix","static_suffix","finish_parse_textbox","stored_state","default_function","load_textbox_state","finish_parse_checkbox","current_is_checked","checked_by_default","value_checked","value_unchecked","load_checkbox_state","finish_parse_dropdown","current_index","default_index","stored_index","Number","load_dropdown_state","default_js_code","compiled_function","validator_names","validator_list","known_validators","from","keys","Object","assign","Textbox","Checkbox","raw_options","option","Dropdown","TABLE_CELL_HEADINGS","appendTextNode","createChildElement","parent","tag_name","append_boolean_setting_checkbox","parent_element","label_text","custom_on_change","enabled","label","checkbox","checked","addEventListener","store_boolean_setting","generate_automatic_placeholder_table","columns","placeholders_to_show","show_empty","sort_and_remove_duplicate_placeholders","table","table_head","table_head_row","table_body","column","table_cell","heading","rows","read_only","row","populate_auto_table_row","input_tables","content_element","title_text","settings_button","expandable_contents","settings_contents","append","update_expanded_state","is_expanded","style","display","expanded","expand_auto_tables","expand_if_needed","show_settings","onclick","preventDefault","stopPropagation","prepare_settings_button","set_highlight_placeholders","output","highlight_placeholders","apply_change_on_focus_change","settings_button_bar","settings_reset_button","placeholder_reset_button","fill_settings_content_container","convert_to_dynamic_placeholder_table","Set","sort","a","b","order_index","cell","description","dynamic_placeholer","input","prepare_input_field","update_auto_table","new_placeholder_list","rows_to_keep","includes","final_rows","reversed_current","reverse","reversed_new","next_new","pop","next_current","table_element","insertBefore","firstChild","insertAdjacentElement","input_element","initialize_input_checkbox","initialize_input_dropdown","initialize_input_textbox","tagName","disabled","new_is_checked","store_checkbox_state","on_placeholder_change","input_elements","option_element","parentNode","selectedIndex","new_index","store_dropdown_state","cursor","confirm_change","event","affected_placeholders","dependency_graph","require_reload","ph","p","update_all_auto_tables","main","placeholder_map","textboxes","checkboxes","dropdowns","validator_data_list","validator_data","has","apply_change_on_focus_change_default","debug_default","expand_auto_tables_default","parse_settings","placeholder_data","parse_config","PlaceholderPluginConfigJson","enable_debug","PlaceholderPlugin","export_api_functions","delay_millis","do_plugin_stuff","setTimeout","allow_inner_html","output_list","placeholder_name","find_dynamic_placeholder_wrappers","replace_placeholders_in_subtree","body","input_list","initialize_all_input_fields","element_list","used_placeholders","HTMLElement","columns_str","split","initialize_auto_tables"],"sourceRoot":""}